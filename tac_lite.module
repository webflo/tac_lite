<?php
/**
 * @file
 *   Control access to site content based on taxonomy, roles and users.
 *
 *
 */
use Drupal\Core\Database\Query\SelectInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\tac_lite\Entity\Scheme;
/**
 * Returns the settings form
 */
function tac_lite_admin_settings($form, &$form_state) {
  $vocabularies = taxonomy_get_vocabularies();

  if (!count($vocabularies)) {
    $form['body'] = array(
      '#type' => 'markup',
      '#markup' => t('You must <a href="!url">create a vocabulary</a> before you can use tac_lite.',
                array('!url' => url('admin/structure/taxonomy/add/vocabulary'))),
    );
    return $form;
  }
  else {
    $options = array();
    foreach ($vocabularies as $vid => $vocab) {
      $options[$vid] = $vocab->name;
    }

    $form['tac_lite_categories'] = array(
      '#type' => 'select',
      '#title' => t('Vocabularies'),
      '#default_value' => variable_get('tac_lite_categories', NULL),
      '#options' => $options,
      '#description' => t('Select one or more vocabularies to control privacy.  <br/>Use caution with hierarchical (nested) taxonomies as <em>visibility</em> settings may cause problems on node edit forms.<br/>Do not select free tagging vocabularies, they are not supported.'),
      '#multiple' => TRUE,
      '#required' => TRUE,
    );

    $scheme_options = array();
    // Currently only view, edit, delete permissions possible, so 7
    // permutations will be more than enough.
    for ($i = 1; $i < 8; $i++)
      $scheme_options[$i] = $i;
    $form['tac_lite_schemes'] = array(
      '#type' => 'select',
      '#title' => t('Number of Schemes'),
      '#description' => t('Each scheme allows for a different set of permissions.  For example, use scheme 1 for read-only permission; scheme 2 for read and update; scheme 3 for delete; etc.  Additional schemes increase the size of your node_access table, so use no more than you need.'),
      '#default_value' => variable_get('tac_lite_schemes', 1),
      '#options' => $scheme_options,
      '#required' => TRUE,
    );

    $form['tac_lite_rebuild'] = array(
      '#type' => 'checkbox',
      '#title' => t('Rebuild content permissions now'),
      '#default_value' => FALSE, // default false because usually only needed after scheme has been changed.
      '#description' => t('Do this once, after you have fully configured access by taxonomy.'),
      '#weight' => 9,
    );


    $ret = system_settings_form($form);
    // Special handling is required when this form is submitted.
    $ret['#submit'][] = '_tac_lite_admin_settings_submit';
    return $ret;
  }
}

/**
 * This form submit callback ensures that the form values are saved, and also
 * the node access database table is rebuilt.
 * 2008 : Modified by Paulo to be compliant with drupal 6
 */
function _tac_lite_admin_settings_submit($form, &$form_state) {
  $rebuild = $form_state['values']['tac_lite_rebuild'];

  // Rebuild the node_access table.
  if ($rebuild) {
    node_access_rebuild(TRUE);
  }
  else {
    drupal_set_message(t('Do not forget to <a href=!url>rebuild node access permissions</a> after you have configured taxonomy-based access.', array(
                           '!url' => url('admin/reports/status/rebuild'),
                         )), 'warning');
  }

  // And rebuild menus, in case the number of schemes has changed.
  menu_rebuild();

  variable_del('tac_lite_rebuild'); // We don't need to store this as a system variable.
}

/**
 * Menu callback to create a form for each scheme.
 * @param $i
 *   The index of the scheme that we will be creating a form for. Passed in as a page argument from the menu.
 */
function tac_lite_admin_settings_scheme($i) {
  return drupal_get_form('tac_lite_admin_scheme_form', $i);
}

/**
 * helper function
 */
function _tac_lite_config($scheme) {
  // different defaults for scheme 1
  if ($scheme === 1) {
    $config = variable_get('tac_lite_config_scheme_' . $scheme, array(
                'name' => t('read'),
                'perms' => array('grant_view'),
              ));
  }
  else {
    $config = variable_get('tac_lite_config_scheme_' . $scheme, array(
                'name' => NULL,
                'perms' => array(),
              ));
  }

  // Merge defaults, for backward compatibility.
  $config += array(
    'term_visibility' => (isset($config['perms']['grant_view']) && $config['perms']['grant_view']),
    'unpublished' => FALSE,
  );

  // For backward compatability, use naming convention for scheme 1
  if ($scheme == 1) {
    $config['realm'] = 'tac_lite';
  }
  else {
    $config['realm'] = 'tac_lite_scheme_' . $scheme;
  }

  return $config;
}

/**
 * Returns the form for role-based privileges.
 */
function tac_lite_admin_scheme_form($form, $form_state, $i) {
  $vids = variable_get('tac_lite_categories', NULL);
  $roles = user_roles();

  $config = _tac_lite_config($i);
  $form['#tac_lite_config'] = $config;
  if (count($vids)) {
    $form['tac_lite_config_scheme_' . $i] = array('#tree' => TRUE);
    $form['tac_lite_config_scheme_' . $i]['name'] = array(
      '#type' => 'textfield',
      '#title' => t('Scheme name'),
      '#description' => t('A human-readable name for administrators to see. For example, \'read\' or \'read and write\'.'),
      '#default_value' => $config['name'],
      '#required' => TRUE,
    );
    // Currently, only view, update and delete are supported by node_access
    $options = array(
      'grant_view' => 'view',
      'grant_update' => 'update',
      'grant_delete' => 'delete',
    );
    $form['tac_lite_config_scheme_' . $i]['perms'] = array(
      '#type' => 'select',
      '#title' => t('Permissions'),
      '#multiple' => TRUE,
      '#options' => $options,
      '#default_value' => $config['perms'],
      '#description' => t('Select which permissions are granted by this scheme.  <br/>Note when granting update, it is best to enable visibility on all terms.  Otherwise a user may unknowingly remove invisible terms while editing a node.'),
      '#required' => FALSE,
    );

    $form['tac_lite_config_scheme_' . $i]['unpublished'] = array(
      '#type' => 'checkbox',
      '#title' => t('Apply to unpublished content'),
      '#description' => t('If checked, permissions in this scheme will apply to unpublished content.  If this scheme includes the view permission, then <strong>unpublished nodes will be visible</strong> to users whose roles would grant them access to the published node.'),
      '#default_value' => $config['unpublished'],
    );

    $form['tac_lite_config_scheme_' . $i]['term_visibility'] = array(
      '#type' => 'checkbox',
      '#title' => t('Visibility'),
      '#description' => t('If checked, this scheme determines whether a user can view <strong>terms</strong>.  Note the <em>view</em> permission in the select field above refers to <strong>node</strong> visibility.  This checkbox refers to <strong>term</strong> visibility, for example in a content edit form or tag cloud.'),
      '#default_value' => $config['term_visibility'],
    );

    $form['helptext'] = array(
      '#type' => 'markup',
      '#markup' => t('To grant to an individual user, visit the <em>access by taxonomy</em> tab on the account edit page.'),
      '#prefix' => '<p>',
      '#suffix' => '</p>',
    );
    $form['helptext2'] = array(
      '#type' => 'markup',
      '#markup' => t('To grant by role, select the terms below.'),
      '#prefix' => '<p>',
      '#suffix' => '</p>',
    );
    $vocabularies = taxonomy_get_vocabularies();
    $all_defaults = variable_get('tac_lite_grants_scheme_' . $i, array());
    $form['tac_lite_grants_scheme_' . $i] = array('#tree' => TRUE);
    foreach ($roles as $rid => $role_name) {
      $form['tac_lite_grants_scheme_' . $i][$rid] = array(
        '#type' => 'fieldset',
        '#tree' => TRUE,
        '#title' => check_plain(t('Grant permission by role: !role', array('!role' => $role_name))),
        '#description' => t(''),
        '#collapsible' => TRUE,
      );

      $defaults = isset($all_defaults[$rid]) ? $all_defaults[$rid] : NULL;
      foreach ($vids as $vid) {
        // Build a taxonomy select form element for this vocab
        $v = $vocabularies[$vid];
        $tree = taxonomy_get_tree($v->vid);
        $options = array(0 => '<' . t('none') . '>');
        if ($tree) {
          foreach ($tree as $term) {
            $choice = new stdClass();
            $choice->option = array($term->tid => str_repeat('-', $term->depth) . $term->name);
            $options[] = $choice;
          }
        }
        $default_values = isset($defaults[$vid]) ? $defaults[$vid] : NULL;
        $form['tac_lite_grants_scheme_' . $i][$rid][$vid] = _tac_lite_term_select($v, $default_values);
      }
    }

    $form['tac_lite_rebuild'] = array(
      '#type' => 'checkbox',
      '#title' => t('Rebuild content permissions now'),
      '#default_value' => FALSE, // default false because usually only needed after scheme has been changed.
      '#description' => t('Do this once, after you have fully configured access by taxonomy.'),
      '#weight' => 9,
    );

    $form['#submit'][] = 'tac_lite_admin_scheme_form_submit';
    return system_settings_form($form);
  }
  else {
    $form['tac_lite_help'] = array(
      '#type' => 'markup',
      '#prefix' => '<p>', '#suffix' => '</p>',
      '#markup' => t('First, select one or more vocabularies on the <a href=!url>settings tab</a>. Then, return to this page to complete configuration.', array('!url' => url('admin/config/people/tac_lite/settings'))));
    return $form;
  }
}

/**
 * Submit function for admin settings form to rebuild the menu.
 */
function tac_lite_admin_scheme_form_submit($form, &$form_state) {
  variable_set('menu_rebuild_needed', TRUE);

  // Rebuild the node_access table.
  if ($form_state['values']['tac_lite_rebuild']) {
    node_access_rebuild(TRUE);
  }
  else {
    drupal_set_message(t('Do not forget to <a href=!url>rebuild node access permissions</a> after you have configured taxonomy-based access.', array(
                           '!url' => url('admin/reports/status/rebuild'),
                         )), 'warning');
  }
  variable_del('tac_lite_rebuild'); // We don't need to store this as a system variable.
}

/**
 * Implementation of hook_user_categories
 *
 * Creates the user edit category form for tac_lite's user-specific permissions under user/edit
 */
function tac_lite_user_categories() {
  return array(
    array(
      'name' => 'tac_lite',
      'title' => t('Access by taxonomy'),
      'weight' => 5,
      'access callback' => 'user_access',
      'access arguments' => array('administer users'),
    ),
  );
}

/**
 * Implementation of hook_form_alter().
 *
 * @param $form
 *   Nested array of form elements that comprise the form.
 * @param $form_state
 *   A keyed array containing the current state of the form. The arguments that drupal_get_form() was originally called with are available in the array $form_state['build_info']['args'].
 * @param $form_id
 *   String representing the name of the form itself. Typically this is the name of the function that generated the form.
 *
 */
function tac_lite_form_alter(&$form, &$form_state, $form_id){
  // Catch for the tac_lite category on the user edit form.
  if ($form_id == 'user_profile_form') {
    if ($form['#user_category'] == 'tac_lite') {
      $vocabularies = taxonomy_get_vocabularies();
      $vids = variable_get('tac_lite_categories', NULL);
      if (count($vids)) {
        for ($i = 1; $i <= variable_get('tac_lite_schemes', 1); $i++) {
          $config = _tac_lite_config($i);
          if ($config['name']) {
            $perms = $config['perms'];
            if ($config['term_visibility']) {
              $perms[] = t('term visibility');
            }
            $form['tac_lite'][$config['realm']] = array(
              '#type' => 'fieldset',
              '#title' => $config['name'],
              '#description' => t('This scheme controls %perms.', array('%perms' => implode(' and ', $perms))),
              '#tree' => TRUE,
            );
            // Create a form element for each vocabulary
            foreach ($vids as $vid) {
              $v = $vocabularies[$vid];
              // TODO: Should we be looking in form_state also for the default value?
              // (Might only be necessary if we are adding in custom validation?)
              $default_values = array();
              if (!empty($form['#user']->data[$config['realm']])) {
                if (isset($form['#user']->data[$config['realm']][$vid])) {
                  $default_values = $form['#user']->data[$config['realm']][$vid];
                }
              }
              $form['tac_lite'][$config['realm']][$vid] =  _tac_lite_term_select($v, $default_values);
              $form['tac_lite'][$config['realm']][$vid]['#description'] =
                t('Grant permission to this user by selecting terms.  Note that permissions are in addition to those granted based on user roles.');
            }
          }
        }
        $form['tac_lite'][0] = array(
          '#type' => 'markup',
          '#markup' => '<p>' . t('You may grant this user access based on the schemes and terms below.  These permissions are in addition to <a href="!url">role based grants on scheme settings pages</a>.',
                    array('!url' => url('admin/config/people/tac_lite/scheme_1'))) . "</p>\n",
          '#weight' => -1,
        );
      }
      else {
        // TODO: Do we need to handle the situation where no vocabularies have been set up yet / none have been assigned to tac_lite?
      }
      return $form;
    }
  }
}

/**
 * Implements hook_node_access_records().
 *
 * We are given a node and we return records for the node_access table. In
 * our case, we inpect the node's taxonomy and grant permissions based on the
 * terms.
 */
function tac_lite_node_access_records($node) {
  $access_handler = \Drupal::service('tac_lite.access_handler');
  return $access_handler->getNodeAccessRecords($node);
}

/**
 * Helper function to build a taxonomy term select element for a form.
 *
 * @param $v
 *   A vocabulary object containing a vid and name.
 * @param $default_values
 *   An array of values to use for the default_value argument for this form element.
 */
function _tac_lite_term_select($v, $default_values = array()) {
  $tree = taxonomy_get_tree($v->vid);
  $options = array(0 => '<' . t('none') . '>');
  if ($tree) {
    foreach ($tree as $term) {
      $choice = new stdClass();
      $choice->option = array($term->tid => str_repeat('-', $term->depth) . $term->name);
      $options[] = $choice;
    }
  }
  $field_array = array(
    '#type' => 'select',
    '#title' => $v->name,
    '#default_value' => $default_values,
    '#options' => $options,
    '#multiple' => TRUE,
    '#description' => $v->description,
  );
  return $field_array;
}

/**
 * Return the term ids of terms this user is allowed to access.
 *
 * Users are granted access to terms either because of who they are,
 * or because of the roles they have.
 *
 * @param AccountInterface $account
 * @param \Drupal\tac_lite\Entity\Scheme $scheme
 *
 * @return
 */
function _tac_lite_user_tids(AccountInterface $account, Scheme $scheme) {
  $tids = db_query('SELECT tid FROM {tac_lite_user} WHERE uid = :uid AND scheme = :scheme', array(':uid' => $account->id(), ':scheme' => $scheme->id()))->fetchCol();
  return $tids;

  /*
  // grant id 0 is reserved for nodes which were not given a grant id when they were created. By adding 0 to the grant id, we let the user view those nodes.
  $grants = array(0);
  $config = _tac_lite_config($scheme);
  $realm = $config['realm'];
  if (isset($account->data[$realm]) && count($account->data[$realm])) {
    // $account->$realm is array. Keys are vids, values are array of tids within that vocabulary, to which the user has access
    foreach ($account->data[$realm] as $tids) {
      if (count($tids)) {
        $grants = array_merge($grants, $tids);
      }
    }
  }

  // add per-role grants in addition to per-user grants
  $defaults = variable_get('tac_lite_grants_scheme_' . $scheme, array());
  foreach ($account->roles as $rid => $role_name) {
    if (isset($defaults[$rid]) && count($defaults[$rid])) {
      foreach ($defaults[$rid] as $tids) {
        if (count($tids)) {
          $grants = array_merge($grants, $tids);
        }
      }
    }
  }

  // Because of some flakyness in the form API and the form we insert under
  // user settings, we may have a bogus entry with vid set
  // to ''. Here we make sure not to return that.
  unset($grants['']);

  return $grants;
  */
}

/**
 * Implementation of hook_node_grants().
 *
 * Returns any grants which may give the user permission to perform the
 * requested op.
 */
function tac_lite_node_grants(AccountInterface $account, $op) {
  $grants = array();
  foreach (tac_lite_load_schemes() as $scheme) {
    if (!empty($scheme->permissions['grant_' . $op])) {
      $grants[$scheme->realm()] = _tac_lite_user_tids($account, $scheme);
    }
  }
  return $grants;
}

/**
 * Implements hook_query_TAG_alter().
 *
 * Acts on queries that list terms (generally these should be tagged with 'term_access')
 * to remove any terms that this user should not be able to see.
 */
function tac_lite_query_term_access_alter(Drupal\Core\Database\Query\AlterableInterface $query) {
  if (!$account = $query->getMetaData('account')) {
    $account = \Drupal::currentUser();
  }

  // If this user has administer rights, don't filter
  if ($account->hasPermission('administer tac_lite')) {
    return;
  }

  // Get our vocabularies and schemes from variables. Return if we have none.
  $vids = \Drupal::config('tac_lite.settings')->get('vocabularies');
  $schemes = \Drupal\tac_lite\Entity\Scheme::loadMultiple();
  if (!$vids || !count($vids) || !$schemes) {
    return;
  }

  // the terms this user is allowed to see
  $term_visibility = FALSE;
  $tids = array(-1);
  foreach ($schemes as $scheme) {
    if ($scheme->get('term_visibility')) {
      $tids = array_merge($tids, _tac_lite_user_tids($account, $scheme));
      $term_visibility = TRUE;
    }
  }

  if ($term_visibility) {
    $tables = $query->getTables();
    $base_table = $query->getMetaData('base_table');
    // If the base table is not given, default to node if present.
    if (!$base_table) {
      foreach ($tables as $table_info) {
        if (!($table_info instanceof SelectInterface)) {
          $table = $table_info['table'];
          // If the {taxonomy_term_data} table is in the query, it wins immediately.
          if ($table == 'taxonomy_term_data' || $table == 'taxonomy_term_field_data') {
            $base_table = $table;
            break;
          }
        }
      }
      // Bail out if the base table is missing.
      if (!$base_table) {
        throw new Exception(t('Query tagged for term access but there is no taxonomy_term_data table, specify the base_table using meta data.'));
      }
    }

    foreach ($tables as $table_info) {
      if ($table_info['table'] == $base_table) {
        $alias = $table_info['alias'];
      }
    }

    // Prevent query from finding terms the current user does not have permission to see.
    $or = db_or();
    $or->condition($alias . '.tid', $tids, 'IN');
    $or->condition($alias . '.vid', $vids, 'NOT IN');
    $query->condition($or);
  }
}

/**
 * Implements hook_entity_type_alter().
 *
 * @param \Drupal\Core\Entity\EntityTypeInterface[] $entity_types
 */
function tac_lite_entity_type_alter(array &$entity_types) {
  $entity_types['user']->setFormClass('edit_tac_lite', '\Drupal\tac_lite\TaxonomyAccessUserForm');
}

/**
 * Implements hook_user_delete().
 *
 * Respond to user deletion.
 */
function tac_lite_user_delete($account) {
  db_delete('tac_lite_user')->condition('uid', $account->id())->execute();
}

/**
 * Implements hook_taxonomy_term_delete().
 *
 * Respond to taxonomy term deletion.
 */
function tac_lite_taxonomy_term_delete(\Drupal\taxonomy\TermInterface $term) {
  db_delete('tac_lite_user')->condition('tid', $term->id())->execute();
}

/**
 * Implements hook_tac_lite_scheme_delete().
 *
 * Respond to tac lite scheme deletion.
 */
function tac_lite_tac_lite_scheme_delete(\Drupal\tac_lite\Entity\Scheme $scheme) {
  db_delete('tac_lite_user')->condition('scheme', $scheme->id())->execute();
}

function tac_lite_load_schemes() {
  $schemes = &drupal_static(__FUNCTION__, NULL);
  if (!isset($schemes)) {
    $schemes = \Drupal\tac_lite\Entity\Scheme::loadMultiple();
    // Sort the entities using the entity class's sort() method.
    // See \Drupal\Core\Config\Entity\ConfigEntityBase::sort().
    uasort($schemes, array('\Drupal\tac_lite\Entity\Scheme', 'sort'));
    return $schemes;
  }
  return $schemes;
}
